// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  emailVerified DateTime?
  image         String?
  name                 String?  
  email                String    @unique
  password             String?
  avatarPublicId       String?
  avatarUrl            String?
  role                 String    @default("user")
  createdAt            DateTime  @default(now())
  resetPasswordToken   String?
  resetPasswordExpire  DateTime?
  orders Order[]
  accounts      Account[]
  sessions      Session[]
  address Address[]

  @@map(name: "user")
}

type Address {
  street1 String?
  street2 String?
  city   String
  state String
  country String
  zip    String?
  phone String?
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  images       Image[]
  orders      OrderItem[]
  category String
  seller String
  brand String?
  numOfReviews Int?
  thumbnail String?
  discountPercentage Float?
stock Int
reviews Reviews[]
ratings Float?
  @@map(name: "product")
}

type Image {
 public_id String?
  url    String
}

type Reviews {
  userId String @db.ObjectId
  title String
  description String
  createdAt DateTime       @default(now())
}

model Order {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  paidAt         DateTime?
  itemsPrice     Float?
  taxPrice       Float?
  shippingPrice  Float
  totalPrice    Float?
  orderStatus    String?
  deliveredAt    DateTime?
  createdAt      DateTime       @default(now())
  shippingInfo    ShippingInfo[]
  userId         String @db.ObjectId
  user           User           @relation(fields: [userId], references: [id])
  paymentInfo    PaymentInfo? 
  orderItems     OrderItem[]

  @@map(name: "order")
}



model ShippingInfo {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  city       String
  phoneNo    String
  postalCode String
  country    String
  orderId String @db.ObjectId
  order   Order   @relation(fields: [orderId], references: [id])

  @@map(name: "shipping_info")
}

model OrderItem {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  quantity Int
  image    String?
  price    Float
  orderId String @db.ObjectId
  order   Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product  Product  @relation(fields: [productId], references: [id])

  @@map(name: "order_item")
}

model PaymentInfo {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  status String?
  paymentMethod String?
  paymentId String?
  orderId String @db.ObjectId @unique
  order   Order   @relation(fields: [orderId], references: [id])

  @@map(name: "payment_info")
}





